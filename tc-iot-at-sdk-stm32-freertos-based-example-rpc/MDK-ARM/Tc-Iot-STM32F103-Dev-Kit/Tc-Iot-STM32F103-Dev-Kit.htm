<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Tc-Iot-STM32F103-Dev-Kit\Tc-Iot-STM32F103-Dev-Kit.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Tc-Iot-STM32F103-Dev-Kit\Tc-Iot-STM32F103-Dev-Kit.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Jun 26 03:02:30 2022
<BR><P>
<H3>Maximum Stack Usage =       1640 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
data_template_demo_task &rArr; IOT_Template_Report_SysInfo_Sync &rArr; IOT_Template_Yield &rArr; _handle_message &rArr; deliver_message &rArr; at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">HardFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[144]">_Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[144]">_Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC1_2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[41]">ADC3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32f1xx_it.o(i.BusFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[20]">DMA1_Channel4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[21]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[22]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[23]">DMA1_Channel7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4a]">DMA2_Channel1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32f1xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[42]">FSMC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[65]">HAL_Free</a> from hal_os.o(i.HAL_Free) referenced from data_template_client_manager.o(i.qcloud_iot_template_init)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32f1xx_it.o(i.HardFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32f1xx_it.o(i.MemManage_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from stm32f1xx_it.o(i.NMI_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[5c]">OnActionCallback</a> from data_template_usr_logic.o(i.OnActionCallback) referenced from data_template_usr_logic.o(i._register_data_template_action)
 <LI><a href="#[5d]">OnControlMsgCallback</a> from data_template_usr_logic.o(i.OnControlMsgCallback) referenced from data_template_usr_logic.o(i._register_data_template_property)
 <LI><a href="#[5f]">OnReportReplyCallback</a> from data_template_usr_logic.o(i.OnReportReplyCallback) referenced from data_template_usr_logic.o(i.data_template_demo_task)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[15]">RTC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[11]">SysTick_Handler</a> from stm32f1xx_it.o(i.SysTick_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[4f]">SystemInit</a> from system_stm32f1xx.o(i.SystemInit) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[14]">TAMPER_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_IRQHandler</a> from stm32f1xx_it.o(i.TIM1_UP_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from stm32f1xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[48]">TIM6_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from hal_at.o(i.UART4_IRQHandler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[3c]">USBWakeUp_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[25]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[26]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32f1xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f103xe.o(.text) referenced from startup_stm32f103xe.o(RESET)
 <LI><a href="#[50]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xe.o(.text)
 <LI><a href="#[57]">_get_status_reply_ack_cb</a> from data_template_client.o(i._get_status_reply_ack_cb) referenced from data_template_client.o(i.IOT_Template_GetStatus_sync)
 <LI><a href="#[62]">_handle_template_expired_reply_callback</a> from data_template_client_manager.o(i._handle_template_expired_reply_callback) referenced from data_template_client_manager.o(i.handle_template_expired_reply)
 <LI><a href="#[5b]">_handle_template_reply_callback</a> from data_template_client_manager.o(i._handle_template_reply_callback) referenced from data_template_client_manager.o(i._on_template_downstream_topic_handler)
 <LI><a href="#[55]">_on_action_handle_callback</a> from data_template_aciton.o(i._on_action_handle_callback) referenced from data_template_aciton.o(i.IOT_Action_Init)
 <LI><a href="#[56]">_on_event_reply_callback</a> from data_template_event.o(i._on_event_reply_callback) referenced from data_template_event.o(i.IOT_Event_Init)
 <LI><a href="#[66]">_on_template_downstream_topic_handler</a> from data_template_client_manager.o(i._on_template_downstream_topic_handler) referenced from data_template_client_manager.o(i.subscribe_template_downstream_topic)
 <LI><a href="#[58]">_reply_ack_cb</a> from data_template_client.o(i._reply_ack_cb) referenced from data_template_client.o(i.IOT_Template_Report_SysInfo_Sync)
 <LI><a href="#[52]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[53]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[51]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[5a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[5e]">client_parser</a> from at_client.o(i.client_parser) referenced from at_client.o(i.at_client_para_init)
 <LI><a href="#[60]">data_template_demo_task</a> from data_template_usr_logic.o(i.data_template_demo_task) referenced from data_template_usr_logic.o(i.data_template_sample)
 <LI><a href="#[68]">demoTask</a> from main.o(i.demoTask) referenced from main.o(.constdata)
 <LI><a href="#[61]">event_post_cb</a> from data_template_usr_logic.o(i.event_post_cb) referenced from data_template_usr_logic.o(i.eventPostCheck)
 <LI><a href="#[59]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[59]">fputc</a> from retarget.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[54]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[63]">json_get_value_by_name_cb</a> from json_parser.o(i.json_get_value_by_name_cb) referenced from json_parser.o(i.json_get_value_by_name)
 <LI><a href="#[4e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[67]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[64]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[2]">urc_discon_func</a> from module_api_inf.o(i.urc_discon_func) referenced 2 times from module_api_inf.o(.data)
 <LI><a href="#[7]">urc_l206_reg_func</a> from module_api_inf.o(i.urc_l206_reg_func) referenced 2 times from module_api_inf.o(.data)
 <LI><a href="#[6]">urc_mqtt_conn_func</a> from module_api_inf.o(i.urc_mqtt_conn_func) referenced 2 times from module_api_inf.o(.data)
 <LI><a href="#[4]">urc_mqtt_state_func</a> from module_api_inf.o(i.urc_mqtt_state_func) referenced 2 times from module_api_inf.o(.data)
 <LI><a href="#[3]">urc_mqtt_sub_func</a> from module_api_inf.o(i.urc_mqtt_sub_func) referenced 2 times from module_api_inf.o(.data)
 <LI><a href="#[5]">urc_ota_status_func</a> from module_api_inf.o(i.urc_ota_status_func) referenced 2 times from module_api_inf.o(.data)
 <LI><a href="#[1]">urc_pub_recv_func</a> from module_api_inf.o(i.urc_pub_recv_func) referenced 2 times from module_api_inf.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[50]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[1fc]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[69]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1fd]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1fe]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1ff]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[200]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[201]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f5]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1ee]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[202]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[54]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_create
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chr_strip
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buff_flush
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDevInfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buff_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_action_json_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Event_JSON_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control_clientToken
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnActionCallback
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_action_to_cloud
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_event_to_cloud
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unsubscribe_template_downstream_topic
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_template_json_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_to_template_upstream_topic
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[19d]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_mqtt_state_func
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_l206_reg_func
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[b1]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDevInfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Message_Arrived_CallBack
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_string
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control_clientToken
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
</UL>

<P><STRONG><a name="[141]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_l206_reg_func
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>

<P><STRONG><a name="[11c]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chr_strip
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_strip
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_string
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_construct_action_json
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_put_json_node
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Construct_Event_JSON
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_str
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_template_json_type
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_json_node
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructSysInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructReportArray
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_template_ConstructControlReply
</UL>

<P><STRONG><a name="[136]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_boolean
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnControlMsgCallback
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnActionCallback
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
</UL>

<P><STRONG><a name="[19c]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[14e]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_strip
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnActionCallback
</UL>

<P><STRONG><a name="[1b1]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name_cb
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_value_if_key_match
</UL>

<P><STRONG><a name="[143]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
</UL>

<P><STRONG><a name="[70]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_uint8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_uint32
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_uint16
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_int8
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_int32
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_int16
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_float
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_double
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_action_input
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_timestamp
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_code_return
</UL>

<P><STRONG><a name="[72]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[95]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[78]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7b]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[7e]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[7f]"></a>strtoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[81]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[83]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f7]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
</UL>

<P><STRONG><a name="[209]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_put_json_node
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_json_node
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[20a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[20b]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[20c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[71]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[51]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[80]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</UL>

<P><STRONG><a name="[82]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[20d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[8c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[88]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[87]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[93]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[162]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[20e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[92]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[20f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>ADC_ConversionStop_Disable</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.ADC_ConversionStop_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[98]"></a>ADC_Enable</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[99]"></a>AT_Uart_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, board.o(i.AT_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AT_Uart_Init &rArr; MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
</UL>

<P><STRONG><a name="[9b]"></a>BoardInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, board.o(i.BoardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BoardInit &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>GetLumen</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peripheral_drv.o(i.GetLumen))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetLumen &rArr; HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
</UL>

<P><STRONG><a name="[aa]"></a>GrayDataSend</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, peripheral_drv.o(i.GrayDataSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GrayDataSend &rArr; GenOneClk &rArr; CountForClk
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TakeAntiCode
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenOneClk
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRGBState
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnActionCallback
</UL>

<P><STRONG><a name="[145]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLumen
</UL>

<P><STRONG><a name="[ac]"></a>HAL_ADC_Init</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32f1xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[a7]"></a>HAL_ADC_Start</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f1xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLumen
</UL>

<P><STRONG><a name="[ae]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f1xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShowString
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DelayMs
</UL>

<P><STRONG><a name="[a8]"></a>HAL_DelayMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_os.o(i.HAL_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DelayMs &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLumen
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
</UL>

<P><STRONG><a name="[65]"></a>HAL_Free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_os.o(i.HAL_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_action_input
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_timestamp
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_event_reply_callback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_value_if_key_match
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_code_return
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Destroy
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_client_manager.o(i.qcloud_iot_template_init)
</UL>
<P><STRONG><a name="[a3]"></a>HAL_GPIO_Init</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[a2]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f1xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayDataSend
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenOneClk
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
</UL>

<P><STRONG><a name="[b0]"></a>HAL_GetDevInfo</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_os.o(i.HAL_GetDevInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GetDevInfo &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>

<P><STRONG><a name="[97]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTimeMs
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop_Disable
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_GetTickFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_GetTickFreq))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>HAL_GetTimeMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_os.o(i.HAL_GetTimeMs))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_expired
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_countdown_ms
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_countdown
</UL>

<P><STRONG><a name="[b3]"></a>HAL_I2C_Init</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[b6]"></a>HAL_I2C_Master_Receive</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Master_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
</UL>

<P><STRONG><a name="[ba]"></a>HAL_I2C_Master_Transmit</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.HAL_I2C_Master_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteOnI2c
</UL>

<P><STRONG><a name="[b4]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, stm32f1xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[ed]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f1xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[be]"></a>HAL_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f1xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, stm32f1xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c8]"></a>HAL_Malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_os.o(i.HAL_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Message_Arrived_CallBack
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new_from_node
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_action_handle_to_template_list
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_property_handle_to_template_list
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
</UL>

<P><STRONG><a name="[c1]"></a>HAL_MspInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_MutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_os.o(i.HAL_MutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_MutexCreate &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_init
</UL>

<P><STRONG><a name="[cc]"></a>HAL_MutexDestroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_os.o(i.HAL_MutexDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_MutexDestroy &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Destroy
</UL>

<P><STRONG><a name="[cf]"></a>HAL_MutexLock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hal_os.o(i.HAL_MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_MutexLock &rArr; osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_action_existence
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_register_property_on_delta
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_check_property_existence
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Register
</UL>

<P><STRONG><a name="[d1]"></a>HAL_MutexUnlock</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_os.o(i.HAL_MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_action_existence
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_register_property_on_delta
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_check_property_existence
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Register
</UL>

<P><STRONG><a name="[c3]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[c2]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[bf]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[ce]"></a>HAL_Printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, hal_os.o(i.HAL_Printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_handshake
</UL>

<P><STRONG><a name="[d5]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c4]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c5]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 742 bytes, Stack size 40 bytes, stm32f1xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[152]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d9]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f1xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[da]"></a>HAL_SleepMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_os.o(i.HAL_SleepMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SleepMs &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlag
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnActionCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
</UL>

<P><STRONG><a name="[dc]"></a>HAL_Snprintf</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, hal_os.o(i.HAL_Snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_action_to_cloud
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_construct_action_json
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_action_json_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_put_json_node
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_event_to_cloud
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Event_JSON_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Construct_Event_JSON
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unsubscribe_template_downstream_topic
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_template_json_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_to_template_upstream_topic
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_json_node
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_empty_json
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructSysInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructReportArray
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_template_ConstructControlReply
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[146]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f1xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[de]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f1xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[c7]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e0]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_IRQHandler
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>HAL_Timer_countdown</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, at_timer.o(i.HAL_Timer_countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Timer_countdown
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown
</UL>

<P><STRONG><a name="[ef]"></a>HAL_Timer_countdown_ms</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, at_timer.o(i.HAL_Timer_countdown_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Timer_countdown_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
</UL>

<P><STRONG><a name="[f0]"></a>HAL_Timer_expired</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, at_timer.o(i.HAL_Timer_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_Timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTimeMs
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired
</UL>

<P><STRONG><a name="[12e]"></a>HAL_Timer_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_timer.o(i.HAL_Timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>

<P><STRONG><a name="[f1]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[f2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, stm32f1xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_UART_Transmit</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, stm32f1xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
</UL>

<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>HumAndTempRead</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, peripheral_drv.o(i.HumAndTempRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HumAndTempRead &rArr; HAL_I2C_Master_Receive &rArr; I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
</UL>

<P><STRONG><a name="[fa]"></a>IOT_ACTION_REPLY</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, data_template_aciton.o(i.IOT_ACTION_REPLY))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = IOT_ACTION_REPLY &rArr; _publish_action_to_cloud &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_action_to_cloud
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_construct_action_json
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnActionCallback
</UL>

<P><STRONG><a name="[fe]"></a>IOT_Action_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, data_template_aciton.o(i.IOT_Action_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = IOT_Action_Init &rArr; module_mqtt_sub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Construct
</UL>

<P><STRONG><a name="[101]"></a>IOT_Action_Register</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, data_template_aciton.o(i.IOT_Action_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = IOT_Action_Register &rArr; _check_action_existence &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_action_existence
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_action_handle_to_template_list
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Action
</UL>

<P><STRONG><a name="[104]"></a>IOT_Event_Init</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, data_template_event.o(i.IOT_Event_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = IOT_Event_Init &rArr; module_mqtt_sub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Construct
</UL>

<P><STRONG><a name="[1b0]"></a>IOT_Event_clearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_template_event.o(i.IOT_Event_clearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_post_cb
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventPostCheck
</UL>

<P><STRONG><a name="[1af]"></a>IOT_Event_getFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, data_template_event.o(i.IOT_Event_getFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventPostCheck
</UL>

<P><STRONG><a name="[1ac]"></a>IOT_Event_setFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, data_template_event.o(i.IOT_Event_setFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
</UL>

<P><STRONG><a name="[105]"></a>IOT_MQTT_IsConnected</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, module_api_inf.o(i.IOT_MQTT_IsConnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = IOT_MQTT_IsConnected &rArr; module_mqtt_state &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_state
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo_Sync
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Property
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus_sync
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ControlReply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
</UL>

<P><STRONG><a name="[107]"></a>IOT_Post_Event</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, data_template_event.o(i.IOT_Post_Event))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = IOT_Post_Event &rArr; _publish_event_to_cloud &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_event_to_cloud
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Construct_Event_JSON
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventPostCheck
</UL>

<P><STRONG><a name="[10a]"></a>IOT_Template_ClearControl</STRONG> (Thumb, 218 bytes, Stack size 312 bytes, data_template_client.o(i.IOT_Template_ClearControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = IOT_Template_ClearControl &rArr; send_template_request &rArr; _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_params
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_status_reply_ack_cb
</UL>

<P><STRONG><a name="[110]"></a>IOT_Template_Construct</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, data_template_client.o(i.IOT_Template_Construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = IOT_Template_Construct &rArr; subscribe_template_downstream_topic &rArr; module_mqtt_sub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[112]"></a>IOT_Template_ControlReply</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, data_template_client.o(i.IOT_Template_ControlReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = IOT_Template_ControlReply &rArr; send_template_request &rArr; _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_params
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_template_ConstructControlReply
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[114]"></a>IOT_Template_Destroy</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, data_template_client.o(i.IOT_Template_Destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = IOT_Template_Destroy &rArr; qcloud_iot_template_reset &rArr; _unsubscribe_template_downstream_topic &rArr; module_mqtt_unsub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_discon
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_property
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_action
</UL>

<P><STRONG><a name="[117]"></a>IOT_Template_GetStatus</STRONG> (Thumb, 206 bytes, Stack size 160 bytes, data_template_client.o(i.IOT_Template_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = IOT_Template_GetStatus &rArr; send_template_request &rArr; _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_params
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_empty_json
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus_sync
</UL>

<P><STRONG><a name="[119]"></a>IOT_Template_GetStatus_sync</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, data_template_client.o(i.IOT_Template_GetStatus_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464<LI>Call Chain = IOT_Template_GetStatus_sync &rArr; IOT_Template_Yield &rArr; _handle_message &rArr; deliver_message &rArr; at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[11b]"></a>IOT_Template_JSON_ConstructReportArray</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, data_template_client.o(i.IOT_Template_JSON_ConstructReportArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IOT_Template_JSON_ConstructReportArray &rArr; put_json_node &rArr; HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_json_node
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_empty_json
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[11e]"></a>IOT_Template_JSON_ConstructSysInfo</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, data_template_client.o(i.IOT_Template_JSON_ConstructSysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IOT_Template_JSON_ConstructSysInfo &rArr; put_json_node &rArr; HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_json_node
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_empty_json
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[11f]"></a>IOT_Template_Message_Arrived_CallBack</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, data_template_client.o(i.IOT_Template_Message_Arrived_CallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IOT_Template_Message_Arrived_CallBack &rArr; list_node_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_lpush
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_pub_recv_func
</UL>

<P><STRONG><a name="[122]"></a>IOT_Template_Register_Action</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, data_template_client.o(i.IOT_Template_Register_Action))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IOT_Template_Register_Action &rArr; IOT_MQTT_IsConnected &rArr; module_mqtt_state &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_action
</UL>

<P><STRONG><a name="[123]"></a>IOT_Template_Register_Property</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, data_template_client.o(i.IOT_Template_Register_Property))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IOT_Template_Register_Property &rArr; IOT_MQTT_IsConnected &rArr; module_mqtt_state &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_register_property_on_delta
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_check_property_existence
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_property
</UL>

<P><STRONG><a name="[126]"></a>IOT_Template_Report</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, data_template_client.o(i.IOT_Template_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = IOT_Template_Report &rArr; send_template_request &rArr; _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_params
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[127]"></a>IOT_Template_Report_SysInfo</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, data_template_client.o(i.IOT_Template_Report_SysInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = IOT_Template_Report_SysInfo &rArr; send_template_request &rArr; _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_request_params
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo_Sync
</UL>

<P><STRONG><a name="[128]"></a>IOT_Template_Report_SysInfo_Sync</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, data_template_client.o(i.IOT_Template_Report_SysInfo_Sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = IOT_Template_Report_SysInfo_Sync &rArr; IOT_Template_Yield &rArr; _handle_message &rArr; deliver_message &rArr; at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[11a]"></a>IOT_Template_Yield</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, data_template_client.o(i.IOT_Template_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = IOT_Template_Yield &rArr; _handle_message &rArr; deliver_message &rArr; at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_template_expired_reply
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_template_expired_event
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo_Sync
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus_sync
</UL>

<P><STRONG><a name="[12c]"></a>InitRGBState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peripheral_drv.o(i.InitRGBState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InitRGBState &rArr; GrayDataSend &rArr; GenOneClk &rArr; CountForClk
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayDataSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>InitTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utils_timer.o(i.InitTimer))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
</UL>

<P><STRONG><a name="[12f]"></a>L206_net_reg</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, module_api_inf.o(i.L206_net_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = L206_net_reg &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_register_network
</UL>

<P><STRONG><a name="[135]"></a>LITE_get_boolean</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_boolean))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LITE_get_boolean &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[137]"></a>LITE_get_double</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_double &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[138]"></a>LITE_get_float</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_float))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_float &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[139]"></a>LITE_get_int16</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_int16))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_int16 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[13a]"></a>LITE_get_int32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_int32))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_int32 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[13b]"></a>LITE_get_int8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_int8))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_int8 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[13c]"></a>LITE_get_string</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, json_token.o(i.LITE_get_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LITE_get_string &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[13d]"></a>LITE_get_uint16</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_uint16))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_uint16 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[13e]"></a>LITE_get_uint32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_uint32))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_uint32 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[13f]"></a>LITE_get_uint8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, json_token.o(i.LITE_get_uint8))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LITE_get_uint8 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
</UL>

<P><STRONG><a name="[140]"></a>LITE_json_value_of</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, json_token.o(i.LITE_json_value_of))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_action_input
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_timestamp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_action_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_action_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_status_return
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_value_if_key_match
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_template_method_type
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_template_get_control
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_template_cmd_control
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_code_return
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_client_token
</UL>

<P><STRONG><a name="[fd]"></a>Log_writter</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, at_log.o(i.Log_writter))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Message_Arrived_CallBack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_register_network
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_unsub
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_state
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_discon
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_conn
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_info_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_handshake
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_pub_recv_func
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_ota_status_func
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_mqtt_sub_func
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_mqtt_conn_func
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_l206_reg_func
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_discon_func
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_req_parse_args
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_urc_table
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_send
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_post_cb
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventPostCheck
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_property
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_action
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnReportReplyCallback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnControlMsgCallback
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnActionCallback
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_ACTION_REPLY
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_action_to_cloud
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_action_input
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_construct_action_json
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_action_json_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_action_handle_to_template_list
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_timestamp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Post_Event
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_event_to_cloud
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_event_reply_callback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Event_JSON_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Construct_Event_JSON
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_code_return
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unsubscribe_template_downstream_topic
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_template_json_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_to_template_upstream_topic
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_property_handle_to_template_list
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_register_property_on_delta
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Register
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo_Sync
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Property
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Action
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructSysInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructReportArray
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus_sync
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Destroy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ControlReply
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Construct
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_template_ConstructControlReply
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reply_ack_cb
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_status_reply_ack_cb
</UL>

<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[147]"></a>MotorControl</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, peripheral_drv.o(i.MotorControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotorControl
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
</UL>

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[14b]"></a>OledClear</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, peripheral_drv.o(i.OledClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = OledClear &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteOnI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShowString
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
</UL>

<P><STRONG><a name="[14c]"></a>OledInit</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, peripheral_drv.o(i.OledInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OledInit &rArr; OledClear &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledClear
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteOnI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>OledShowString</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, peripheral_drv.o(i.OledShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OledShowString &rArr; OLED_ShowChar &rArr; OledSetPos &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledClear
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
</UL>

<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[150]"></a>SystemClock_Config</STRONG> (Thumb, 130 bytes, Stack size 96 bytes, board.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>SystemInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_stm32f1xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM1_UP_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 20 bytes, stm32f1xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, hal_at.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART4_IRQHandler &rArr; ring_buff_push_data
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buff_push_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f1xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xe.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>_Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i._Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>

<P><STRONG><a name="[157]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[211]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1bb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[212]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[213]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[159]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[214]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[215]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[216]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[d4]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
</UL>

<P><STRONG><a name="[15a]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[217]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[218]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[219]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[dd]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintf
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[21a]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[21b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[21c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[21d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[79]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1a2]"></a>at_client_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at_client.o(i.at_client_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>

<P><STRONG><a name="[189]"></a>at_client_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, at_client.o(i.at_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = at_client_init &rArr; hal_thread_create &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_create
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[18a]"></a>at_client_para_init</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, at_client.o(i.at_client_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = at_client_para_init &rArr; HAL_MutexCreate &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buff_init
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
</UL>

<P><STRONG><a name="[18d]"></a>at_client_send</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, at_client.o(i.at_client_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_client_send &rArr; at_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
</UL>

<P><STRONG><a name="[131]"></a>at_create_resp</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, at_client.o(i.at_create_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_create_resp &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_unsub
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_state
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_discon
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_conn
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_info_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_handshake
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
</UL>

<P><STRONG><a name="[134]"></a>at_delete_resp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, at_client.o(i.at_delete_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_delete_resp &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_unsub
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_state
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_discon
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_conn
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_info_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_handshake
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
</UL>

<P><STRONG><a name="[190]"></a>at_get_last_cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at_utils.o(i.at_get_last_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[132]"></a>at_obj_exec_cmd</STRONG> (Thumb, 206 bytes, Stack size 64 bytes, at_client.o(i.at_obj_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_last_cmd
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_expired
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_unsub
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_state
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_discon
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_conn
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_info_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_handshake
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
</UL>

<P><STRONG><a name="[194]"></a>at_req_parse_args</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, at_utils.o(i.at_req_parse_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
</UL>

<P><STRONG><a name="[196]"></a>at_resp_get_line</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, at_client.o(i.at_resp_get_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_resp_get_line &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_handshake
</UL>

<P><STRONG><a name="[18e]"></a>at_send_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_at.o(i.at_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = at_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_send
</UL>

<P><STRONG><a name="[1c4]"></a>at_set_end_sign</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_client.o(i.at_set_end_sign))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
</UL>

<P><STRONG><a name="[197]"></a>at_set_urc_table</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, at_client.o(i.at_set_urc_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_set_urc_table &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[195]"></a>at_sscanf</STRONG> (Thumb, 584 bytes, Stack size 40 bytes, at_utils.o(i.at_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_req_parse_args
</UL>

<P><STRONG><a name="[198]"></a>at_strip</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, at_utils.o(i.at_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_strip
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
</UL>

<P><STRONG><a name="[199]"></a>at_vprintf</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_utils.o(i.at_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_vprintf &rArr; at_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
</UL>

<P><STRONG><a name="[18f]"></a>at_vprintfln</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at_utils.o(i.at_vprintfln))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = at_vprintfln &rArr; at_vprintf &rArr; at_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[118]"></a>build_empty_json</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, data_template_client_json.o(i.build_empty_json))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = build_empty_json &rArr; HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructSysInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructReportArray
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus
</UL>

<P><STRONG><a name="[10d]"></a>check_snprintf_return</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, data_template_client_json.o(i.check_snprintf_return))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_construct_action_json
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_action_json_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_put_json_node
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Event_JSON_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Construct_Event_JSON
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_json_node
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructSysInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructReportArray
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_template_ConstructControlReply
</UL>

<P><STRONG><a name="[19a]"></a>chr_strip</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, at_utils.o(i.chr_strip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = chr_strip &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
</UL>

<P><STRONG><a name="[15e]"></a>countdown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utils_timer.o(i.countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = countdown &rArr; HAL_Timer_countdown
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_countdown
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
</UL>

<P><STRONG><a name="[19e]"></a>countdown_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utils_timer.o(i.countdown_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = countdown_ms &rArr; HAL_Timer_countdown_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlag
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
</UL>

<P><STRONG><a name="[60]"></a>data_template_demo_task</STRONG> (Thumb, 670 bytes, Stack size 168 bytes, data_template_usr_logic.o(i.data_template_demo_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640<LI>Call Chain = data_template_demo_task &rArr; IOT_Template_Report_SysInfo_Sync &rArr; IOT_Template_Yield &rArr; _handle_message &rArr; deliver_message &rArr; at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_destroy
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_register_network
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_conn
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventPostCheck
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deal_down_stream_user_logic
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_property
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_register_data_template_action
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_data_template
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo_Sync
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructSysInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructReportArray
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus_sync
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ControlReply
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Construct
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_usr_logic.o(i.data_template_sample)
</UL>
<P><STRONG><a name="[1ab]"></a>data_template_sample</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, data_template_usr_logic.o(i.data_template_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = data_template_sample &rArr; hal_thread_create &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_destroy
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTask
</UL>

<P><STRONG><a name="[16a]"></a>deliver_message</STRONG> (Thumb, 292 bytes, Stack size 1224 bytes, mqtt.o(i.deliver_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = deliver_message &rArr; at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_topic_matched
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_strip
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_req_parse_args
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
</UL>

<P><STRONG><a name="[68]"></a>demoTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, main.o(i.demoTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = demoTask &rArr; data_template_sample &rArr; hal_thread_create &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_sample
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>expired</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utils_timer.o(i.expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = expired &rArr; HAL_Timer_expired
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_expired
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlag
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_expired_reply_callback
</UL>

<P><STRONG><a name="[59]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[184]"></a>get_control_clientToken</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, data_template_client_manager.o(i.get_control_clientToken))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_template_ConstructControlReply
</UL>

<P><STRONG><a name="[18b]"></a>hal_thread_create</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, hal_os.o(i.hal_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hal_thread_create &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_sample
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
</UL>

<P><STRONG><a name="[1a9]"></a>hal_thread_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_os.o(i.hal_thread_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hal_thread_destroy &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_sample
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_discon_func
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[12b]"></a>handle_template_expired_event</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_template_event.o(i.handle_template_expired_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = handle_template_expired_event &rArr; _traverse_event_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
</UL>

<P><STRONG><a name="[12a]"></a>handle_template_expired_reply</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, data_template_client_manager.o(i.handle_template_expired_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = handle_template_expired_reply &rArr; _traverse_template_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
</UL>

<P><STRONG><a name="[10e]"></a>init_request_params</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, data_template_client_json.o(i.init_request_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_request_params
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ControlReply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
</UL>

<P><STRONG><a name="[183]"></a>insert_str</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, data_template_client_json.o(i.insert_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = insert_str
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_template_json_type
</UL>

<P><STRONG><a name="[ff]"></a>iot_device_info_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, iot_device.o(i.iot_device_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_action_to_cloud
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_event_to_cloud
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unsubscribe_template_downstream_topic
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_to_template_upstream_topic
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;build_empty_json
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Init
</UL>

<P><STRONG><a name="[1b4]"></a>iot_device_info_init</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, iot_device.o(i.iot_device_info_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = iot_device_info_init &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>

<P><STRONG><a name="[1b5]"></a>json_get_next_object</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, json_parser.o(i.json_get_next_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
</UL>

<P><STRONG><a name="[1b7]"></a>json_get_object</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, json_parser.o(i.json_get_object))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
</UL>

<P><STRONG><a name="[142]"></a>json_get_value_by_name</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, json_parser.o(i.json_get_value_by_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_name_value
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>

<P><STRONG><a name="[63]"></a>json_get_value_by_name_cb</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, json_parser.o(i.json_get_value_by_name_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = json_get_value_by_name_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> json_parser.o(i.json_get_value_by_name)
</UL>
<P><STRONG><a name="[1b6]"></a>json_parse_name_value</STRONG> (Thumb, 188 bytes, Stack size 72 bytes, json_parser.o(i.json_parse_name_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_object
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_next_object
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value_by_name
</UL>

<P><STRONG><a name="[1b8]"></a>list_destroy</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, utils_list.o(i.list_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = list_destroy &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_reset
</UL>

<P><STRONG><a name="[15f]"></a>list_find</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, utils_list.o(i.list_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = list_find &rArr; list_iterator_new &rArr; list_iterator_new_from_node &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_action_existence
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_check_property_existence
</UL>

<P><STRONG><a name="[167]"></a>list_iterator_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utils_list.o(i.list_iterator_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = list_iterator_destroy &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
</UL>

<P><STRONG><a name="[164]"></a>list_iterator_new</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utils_list.o(i.list_iterator_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = list_iterator_new &rArr; list_iterator_new_from_node &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new_from_node
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
</UL>

<P><STRONG><a name="[1b9]"></a>list_iterator_new_from_node</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, utils_list.o(i.list_iterator_new_from_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = list_iterator_new_from_node &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
</UL>

<P><STRONG><a name="[165]"></a>list_iterator_next</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utils_list.o(i.list_iterator_next))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
</UL>

<P><STRONG><a name="[121]"></a>list_lpush</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, utils_list.o(i.list_lpush))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Message_Arrived_CallBack
</UL>

<P><STRONG><a name="[1ba]"></a>list_new</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, utils_list.o(i.list_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = list_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_init
</UL>

<P><STRONG><a name="[120]"></a>list_node_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utils_list.o(i.list_node_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = list_node_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Message_Arrived_CallBack
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_action_handle_to_template_list
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_property_handle_to_template_list
</UL>

<P><STRONG><a name="[16b]"></a>list_remove</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, utils_list.o(i.list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = list_remove &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_expired_reply_callback
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_message
</UL>

<P><STRONG><a name="[15b]"></a>list_rpush</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, utils_list.o(i.list_rpush))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_action_handle_to_template_list
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_property_handle_to_template_list
</UL>

<P><STRONG><a name="[4e]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = main &rArr; OledShowString &rArr; OLED_ShowChar &rArr; OledSetPos &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShowString
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRGBState
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTickFreq
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_info
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ae]"></a>mem_info</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(i.mem_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mem_info &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demoTask
</UL>

<P><STRONG><a name="[1bf]"></a>module_handshake</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, module_api_inf.o(i.module_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = module_handshake &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Printf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>

<P><STRONG><a name="[1c0]"></a>module_info_set</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, module_api_inf.o(i.module_info_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = module_info_set &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>

<P><STRONG><a name="[1c1]"></a>module_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, module_api_inf.o(i.module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = module_init &rArr; at_client_init &rArr; hal_thread_create &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_urc_table
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_prepare
</UL>

<P><STRONG><a name="[1a5]"></a>module_mqtt_conn</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, module_api_inf.o(i.module_mqtt_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = module_mqtt_conn &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[116]"></a>module_mqtt_discon</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, module_api_inf.o(i.module_mqtt_discon))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = module_mqtt_discon &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Destroy
</UL>

<P><STRONG><a name="[17e]"></a>module_mqtt_pub</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, module_api_inf.o(i.module_mqtt_pub))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_publ
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_action_to_cloud
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_event_to_cloud
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_to_template_upstream_topic
</UL>

<P><STRONG><a name="[1c3]"></a>module_mqtt_publ</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, module_api_inf.o(i.module_mqtt_publ))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_set_end_sign
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_send
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
</UL>

<P><STRONG><a name="[106]"></a>module_mqtt_state</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, module_api_inf.o(i.module_mqtt_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = module_mqtt_state &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_MQTT_IsConnected
</UL>

<P><STRONG><a name="[100]"></a>module_mqtt_sub</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, module_api_inf.o(i.module_mqtt_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = module_mqtt_sub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sub_topic
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlag
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subscribe_template_downstream_topic
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Init
</UL>

<P><STRONG><a name="[186]"></a>module_mqtt_unsub</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, module_api_inf.o(i.module_mqtt_unsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = module_mqtt_unsub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unsubscribe_template_downstream_topic
</UL>

<P><STRONG><a name="[1c2]"></a>module_power_on</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, hal_at.o(i.module_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = module_power_on &rArr; AT_Uart_Init &rArr; MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Uart_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DelayMs
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buff_flush
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
</UL>

<P><STRONG><a name="[1a4]"></a>module_register_network</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, module_api_inf.o(i.module_register_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = module_register_network &rArr; L206_net_reg &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[db]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
</UL>

<P><STRONG><a name="[1bd]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>osMutexCreate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os.o(i.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
</UL>

<P><STRONG><a name="[cd]"></a>osMutexDelete</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexDestroy
</UL>

<P><STRONG><a name="[d2]"></a>osMutexRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
</UL>

<P><STRONG><a name="[d0]"></a>osMutexWait</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os.o(i.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMutexWait &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
</UL>

<P><STRONG><a name="[14f]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1b2]"></a>osThreadCreate</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_create
</UL>

<P><STRONG><a name="[1b3]"></a>osThreadTerminate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_destroy
</UL>

<P><STRONG><a name="[173]"></a>parse_action_id</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, data_template_client_json.o(i.parse_action_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_action_id &rArr; LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
</UL>

<P><STRONG><a name="[175]"></a>parse_action_input</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, data_template_client_json.o(i.parse_action_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_action_input &rArr; LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
</UL>

<P><STRONG><a name="[172]"></a>parse_client_token</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, data_template_client_json.o(i.parse_client_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_client_token &rArr; LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_event_reply_callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
</UL>

<P><STRONG><a name="[16d]"></a>parse_code_return</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, data_template_client_json.o(i.parse_code_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = parse_code_return &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_event_reply_callback
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
</UL>

<P><STRONG><a name="[176]"></a>parse_status_return</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, data_template_client_json.o(i.parse_status_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_status_return &rArr; LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_event_reply_callback
</UL>

<P><STRONG><a name="[17a]"></a>parse_template_cmd_control</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, data_template_client_json.o(i.parse_template_cmd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_template_cmd_control &rArr; LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
</UL>

<P><STRONG><a name="[16e]"></a>parse_template_get_control</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, data_template_client_json.o(i.parse_template_get_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_template_get_control &rArr; LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
</UL>

<P><STRONG><a name="[171]"></a>parse_template_method_type</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, data_template_client_json.o(i.parse_template_method_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = parse_template_method_type &rArr; LITE_json_value_of &rArr; json_get_value_by_name &rArr; json_parse_name_value &rArr; json_get_next_object &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
</UL>

<P><STRONG><a name="[174]"></a>parse_timestamp</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, data_template_client_json.o(i.parse_timestamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = parse_timestamp &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
</UL>

<P><STRONG><a name="[11d]"></a>put_json_node</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, data_template_client_json.o(i.put_json_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = put_json_node &rArr; HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructSysInfo
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_JSON_ConstructReportArray
</UL>

<P><STRONG><a name="[c9]"></a>pvPortMalloc</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
</UL>

<P><STRONG><a name="[1f9]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1e5]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[111]"></a>qcloud_iot_template_init</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, data_template_client_manager.o(i.qcloud_iot_template_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = qcloud_iot_template_init &rArr; HAL_MutexCreate &rArr; osMutexCreate &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexCreate
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_new
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Construct
</UL>

<P><STRONG><a name="[115]"></a>qcloud_iot_template_reset</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, data_template_client_manager.o(i.qcloud_iot_template_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = qcloud_iot_template_reset &rArr; _unsubscribe_template_downstream_topic &rArr; module_mqtt_unsub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_destroy
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unsubscribe_template_downstream_topic
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Destroy
</UL>

<P><STRONG><a name="[1c5]"></a>register_sub_topic</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, mqtt.o(i.register_sub_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = register_sub_topic &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
</UL>

<P><STRONG><a name="[193]"></a>ring_buff_flush</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ringbuff.o(i.ring_buff_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ring_buff_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_power_on
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[18c]"></a>ring_buff_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ringbuff.o(i.ring_buff_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ring_buff_init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
</UL>

<P><STRONG><a name="[188]"></a>ring_buff_pop_data</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ringbuff.o(i.ring_buff_pop_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ring_buff_pop_data
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
</UL>

<P><STRONG><a name="[153]"></a>ring_buff_push_data</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, ringbuff.o(i.ring_buff_push_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ring_buff_push_data
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>send_template_request</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, data_template_client_manager.o(i.send_template_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = send_template_request &rArr; _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chr_strip
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_client_token
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_template_json_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_publish_to_template_upstream_topic
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_request_to_template_list
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ControlReply
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
</UL>

<P><STRONG><a name="[10b]"></a>subscribe_template_downstream_topic</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, data_template_client_manager.o(i.subscribe_template_downstream_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = subscribe_template_downstream_topic &rArr; module_mqtt_sub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report_SysInfo
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Report
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_GetStatus
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ControlReply
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Construct
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
</UL>

<P><STRONG><a name="[124]"></a>template_common_check_property_existence</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, data_template_client_common.o(i.template_common_check_property_existence))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = template_common_check_property_existence &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Property
</UL>

<P><STRONG><a name="[125]"></a>template_common_register_property_on_delta</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, data_template_client_common.o(i.template_common_register_property_on_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = template_common_register_property_on_delta &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_property_handle_to_template_list
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Property
</UL>

<P><STRONG><a name="[155]"></a>template_put_json_node</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, data_template_client_json.o(i.template_put_json_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = template_put_json_node &rArr; HAL_Snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_construct_action_json
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Construct_Event_JSON
</UL>

<P><STRONG><a name="[169]"></a>update_value_if_key_match</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, data_template_client_json.o(i.update_value_if_key_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = update_value_if_key_match &rArr; _direct_update_value &rArr; LITE_get_uint8 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_direct_update_value
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
</UL>

<P><STRONG><a name="[1d5]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1da]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1e4]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d7]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1d6]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1d9]"></a>vPortEnterCritical</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1db]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[af]"></a>vPortFree</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
</UL>

<P><STRONG><a name="[1f4]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1ed]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[1ca]"></a>vQueueDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[1ef]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, queue.o(i.vQueueUnregisterQueue))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[1c6]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[1d3]"></a>vTaskDelete</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[1e9]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1f1]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1f2]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1fa]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[1c7]"></a>vTaskStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[1dd]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[6b]"></a>vTaskSwitchContext</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1be]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(i.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_info
</UL>

<P><STRONG><a name="[1f3]"></a>xPortStartScheduler</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d0]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[1c8]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>

<P><STRONG><a name="[1f7]"></a>xQueueGenericCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[1ce]"></a>xQueueGenericReceive</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[1f8]"></a>xQueueGenericReset</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[1cc]"></a>xQueueGenericSend</STRONG> (Thumb, 350 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[1cb]"></a>xQueueGiveFromISR</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[1cd]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[1fb]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1d2]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1cf]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1f6]"></a>xTaskIncrementTick</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[1e2]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[1e8]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1de]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9c]"></a>GPIO_Init</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, board.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[9d]"></a>MX_ADC3_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, board.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[9e]"></a>MX_I2C1_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, board.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[9f]"></a>MX_I2C2_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, board.o(i.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[a1]"></a>MX_TIM2_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, board.o(i.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[9a]"></a>MX_UART4_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Uart_Init
</UL>

<P><STRONG><a name="[a0]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, board.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInit
</UL>

<P><STRONG><a name="[a5]"></a>CountForClk</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, peripheral_drv.o(i.CountForClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CountForClk
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GenOneClk
</UL>

<P><STRONG><a name="[a4]"></a>GenOneClk</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, peripheral_drv.o(i.GenOneClk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GenOneClk &rArr; CountForClk
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountForClk
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayDataSend
</UL>

<P><STRONG><a name="[148]"></a>OLED_ShowChar</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, peripheral_drv.o(i.OLED_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = OLED_ShowChar &rArr; OledSetPos &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteOnI2c
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledSetPos
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShowString
</UL>

<P><STRONG><a name="[149]"></a>OledSetPos</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, peripheral_drv.o(i.OledSetPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = OledSetPos &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteOnI2c
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
</UL>

<P><STRONG><a name="[14a]"></a>OledWriteOnI2c</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peripheral_drv.o(i.OledWriteOnI2c))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledClear
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledSetPos
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_ShowChar
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
</UL>

<P><STRONG><a name="[ab]"></a>TakeAntiCode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, peripheral_drv.o(i.TakeAntiCode))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayDataSend
</UL>

<P><STRONG><a name="[64]"></a>prvTaskExitError</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1d4]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1d8]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1dc]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1df]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[67]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1e3]"></a>prvInitialiseNewTask</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1f0]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1e0]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1e1]"></a>prvCopyDataToQueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[1e6]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1e7]"></a>prvUnlockQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[1ea]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1eb]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1c9]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[1d1]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[f3]"></a>UART_SetConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f5]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f1xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[d3]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f1xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[e1]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e4]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f1xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e2]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[e3]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f1xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[f9]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f1xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[b8]"></a>I2C_MasterRequestRead</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, stm32f1xx_hal_i2c.o(i.I2C_MasterRequestRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_MasterRequestRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[bb]"></a>I2C_MasterRequestWrite</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_MasterRequestWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[bd]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[b7]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[f8]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestWrite
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterRequestRead
</UL>

<P><STRONG><a name="[b9]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Receive
</UL>

<P><STRONG><a name="[bc]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f1xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Master_Transmit
</UL>

<P><STRONG><a name="[187]"></a>at_client_getchar</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, at_client.o(i.at_client_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_client_getchar &rArr; ring_buff_pop_data
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buff_pop_data
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_expired
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Timer_countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[191]"></a>at_recv_readline</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, at_client.o(i.at_recv_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_recv_readline &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ring_buff_flush
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[5e]"></a>client_parser</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, at_client.o(i.client_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = client_parser &rArr; at_recv_readline &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_client.o(i.at_client_para_init)
</UL>
<P><STRONG><a name="[192]"></a>get_urc_obj</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, at_client.o(i.get_urc_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_urc_obj &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[130]"></a>clearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, module_api_inf.o(i.clearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_conn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_mqtt_state_func
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_l206_reg_func
</UL>

<P><STRONG><a name="[1ec]"></a>setFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, module_api_inf.o(i.setFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_mqtt_sub_func
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_mqtt_state_func
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_mqtt_conn_func
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;urc_l206_reg_func
</UL>

<P><STRONG><a name="[2]"></a>urc_discon_func</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, module_api_inf.o(i.urc_discon_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = urc_discon_func &rArr; hal_thread_destroy &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_thread_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_api_inf.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>urc_l206_reg_func</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, module_api_inf.o(i.urc_l206_reg_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = urc_l206_reg_func &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlag
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_api_inf.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>urc_mqtt_conn_func</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, module_api_inf.o(i.urc_mqtt_conn_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = urc_mqtt_conn_func &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_api_inf.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>urc_mqtt_state_func</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, module_api_inf.o(i.urc_mqtt_state_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = urc_mqtt_state_func &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlag
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFlag
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_api_inf.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>urc_mqtt_sub_func</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, module_api_inf.o(i.urc_mqtt_sub_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = urc_mqtt_sub_func &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_api_inf.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>urc_ota_status_func</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, module_api_inf.o(i.urc_ota_status_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = urc_ota_status_func &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_api_inf.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>urc_pub_recv_func</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, module_api_inf.o(i.urc_pub_recv_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = urc_pub_recv_func &rArr; IOT_Template_Message_Arrived_CallBack &rArr; list_node_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Message_Arrived_CallBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> module_api_inf.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>waitFlag</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, module_api_inf.o(i.waitFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = waitFlag &rArr; HAL_SleepMs &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_sub
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_conn
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L206_net_reg
</UL>

<P><STRONG><a name="[1ad]"></a>_is_topic_matched</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, mqtt.o(i._is_topic_matched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _is_topic_matched
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
</UL>

<P><STRONG><a name="[57]"></a>_get_status_reply_ack_cb</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, data_template_client.o(i._get_status_reply_ack_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = _get_status_reply_ack_cb &rArr; IOT_Template_ClearControl &rArr; send_template_request &rArr; _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ClearControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_client.o(i.IOT_Template_GetStatus_sync)
</UL>
<P><STRONG><a name="[129]"></a>_handle_message</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, data_template_client.o(i._handle_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = _handle_message &rArr; deliver_message &rArr; at_req_parse_args &rArr; at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliver_message
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Yield
</UL>

<P><STRONG><a name="[58]"></a>_reply_ack_cb</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, data_template_client.o(i._reply_ack_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _reply_ack_cb &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_client.o(i.IOT_Template_Report_SysInfo_Sync)
</UL>
<P><STRONG><a name="[113]"></a>_template_ConstructControlReply</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, data_template_client.o(i._template_ConstructControlReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _template_ConstructControlReply &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_control_clientToken
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_ControlReply
</UL>

<P><STRONG><a name="[15c]"></a>_add_property_handle_to_template_list</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, data_template_client_common.o(i._add_property_handle_to_template_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _add_property_handle_to_template_list &rArr; list_node_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_rpush
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_common_register_property_on_delta
</UL>

<P><STRONG><a name="[15d]"></a>_add_request_to_template_list</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, data_template_client_manager.o(i._add_request_to_template_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _add_request_to_template_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_rpush
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
</UL>

<P><STRONG><a name="[168]"></a>_handle_control</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, data_template_client_manager.o(i._handle_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _handle_control &rArr; update_value_if_key_match &rArr; _direct_update_value &rArr; LITE_get_uint8 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_value_if_key_match
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
</UL>

<P><STRONG><a name="[62]"></a>_handle_template_expired_reply_callback</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, data_template_client_manager.o(i._handle_template_expired_reply_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _handle_template_expired_reply_callback &rArr; list_remove &rArr; HAL_Free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_client_manager.o(i.handle_template_expired_reply)
</UL>
<P><STRONG><a name="[5b]"></a>_handle_template_reply_callback</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, data_template_client_manager.o(i._handle_template_reply_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _handle_template_reply_callback &rArr; _handle_control &rArr; update_value_if_key_match &rArr; _direct_update_value &rArr; LITE_get_uint8 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_template_get_control
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_code_return
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control_clientToken
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_client_manager.o(i._on_template_downstream_topic_handler)
</UL>
<P><STRONG><a name="[66]"></a>_on_template_downstream_topic_handler</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, data_template_client_manager.o(i._on_template_downstream_topic_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _on_template_downstream_topic_handler &rArr; _handle_control &rArr; update_value_if_key_match &rArr; _direct_update_value &rArr; LITE_get_uint8 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_template_method_type
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_template_cmd_control
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_client_token
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_template_list
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_control_clientToken
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_control
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_client_manager.o(i.subscribe_template_downstream_topic)
</UL>
<P><STRONG><a name="[17f]"></a>_publish_to_template_upstream_topic</STRONG> (Thumb, 104 bytes, Stack size 160 bytes, data_template_client_manager.o(i._publish_to_template_upstream_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = _publish_to_template_upstream_topic &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
</UL>

<P><STRONG><a name="[16f]"></a>_set_control_clientToken</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, data_template_client_manager.o(i._set_control_clientToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _set_control_clientToken &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_template_reply_callback
</UL>

<P><STRONG><a name="[182]"></a>_set_template_json_type</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, data_template_client_manager.o(i._set_template_json_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _set_template_json_type &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_str
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_template_request
</UL>

<P><STRONG><a name="[179]"></a>_traverse_template_list</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, data_template_client_manager.o(i._traverse_template_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _traverse_template_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_template_downstream_topic_handler
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_template_expired_reply
</UL>

<P><STRONG><a name="[185]"></a>_unsubscribe_template_downstream_topic</STRONG> (Thumb, 102 bytes, Stack size 160 bytes, data_template_client_manager.o(i._unsubscribe_template_downstream_topic))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _unsubscribe_template_downstream_topic &rArr; module_mqtt_unsub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_unsub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qcloud_iot_template_reset
</UL>

<P><STRONG><a name="[108]"></a>_IOT_Construct_Event_JSON</STRONG> (Thumb, 704 bytes, Stack size 48 bytes, data_template_event.o(i._IOT_Construct_Event_JSON))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _IOT_Construct_Event_JSON &rArr; _IOT_Event_JSON_Init &rArr; _create_event_add_to_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_put_json_node
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Event_JSON_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Post_Event
</UL>

<P><STRONG><a name="[154]"></a>_IOT_Event_JSON_Init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, data_template_event.o(i._IOT_Event_JSON_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _IOT_Event_JSON_Init &rArr; _create_event_add_to_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_event_add_to_list
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Construct_Event_JSON
</UL>

<P><STRONG><a name="[156]"></a>_create_event_add_to_list</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, data_template_event.o(i._create_event_add_to_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _create_event_add_to_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_rpush
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_IOT_Event_JSON_Init
</UL>

<P><STRONG><a name="[56]"></a>_on_event_reply_callback</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, data_template_event.o(i._on_event_reply_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _on_event_reply_callback &rArr; parse_code_return &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_status_return
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_traverse_event_list
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_code_return
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_client_token
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_event.o(i.IOT_Event_Init)
</UL>
<P><STRONG><a name="[109]"></a>_publish_event_to_cloud</STRONG> (Thumb, 118 bytes, Stack size 168 bytes, data_template_event.o(i._publish_event_to_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _publish_event_to_cloud &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Post_Event
</UL>

<P><STRONG><a name="[177]"></a>_traverse_event_list</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, data_template_event.o(i._traverse_event_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _traverse_event_list &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_event_reply_callback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_template_expired_event
</UL>

<P><STRONG><a name="[160]"></a>_direct_update_value</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, data_template_client_json.o(i._direct_update_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _direct_update_value &rArr; LITE_get_uint8 &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_uint8
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_uint32
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_uint16
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_string
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_int8
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_int32
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_int16
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_float
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_double
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_get_boolean
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_value_if_key_match
</UL>

<P><STRONG><a name="[103]"></a>_add_action_handle_to_template_list</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, data_template_aciton.o(i._add_action_handle_to_template_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _add_action_handle_to_template_list &rArr; list_node_new &rArr; HAL_Malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Malloc
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_rpush
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_node_new
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Register
</UL>

<P><STRONG><a name="[102]"></a>_check_action_existence</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, data_template_aciton.o(i._check_action_existence))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _check_action_existence &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_find
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Action_Register
</UL>

<P><STRONG><a name="[163]"></a>_handle_aciton</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, data_template_aciton.o(i._handle_aciton))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = _handle_aciton &rArr; _parse_action_input &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexUnlock
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MutexLock
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_next
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_new
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_iterator_destroy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_parse_action_input
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_action_handle_callback
</UL>

<P><STRONG><a name="[170]"></a>_iot_action_json_init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, data_template_aciton.o(i._iot_action_json_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _iot_action_json_init &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_construct_action_json
</UL>

<P><STRONG><a name="[fb]"></a>_iot_construct_action_json</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, data_template_aciton.o(i._iot_construct_action_json))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _iot_construct_action_json &rArr; _iot_action_json_init &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_iot_action_json_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;template_put_json_node
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_snprintf_return
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_ACTION_REPLY
</UL>

<P><STRONG><a name="[55]"></a>_on_action_handle_callback</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, data_template_aciton.o(i._on_action_handle_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _on_action_handle_callback &rArr; _handle_aciton &rArr; _parse_action_input &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_timestamp
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_action_input
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_action_id
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_template_method_type
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_client_token
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_aciton.o(i.IOT_Action_Init)
</UL>
<P><STRONG><a name="[166]"></a>_parse_action_input</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, data_template_aciton.o(i._parse_action_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _parse_action_input &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Free
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LITE_json_value_of
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_aciton
</UL>

<P><STRONG><a name="[fc]"></a>_publish_action_to_cloud</STRONG> (Thumb, 132 bytes, Stack size 168 bytes, data_template_aciton.o(i._publish_action_to_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _publish_action_to_cloud &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_mqtt_pub
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_ACTION_REPLY
</UL>

<P><STRONG><a name="[5c]"></a>OnActionCallback</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, data_template_usr_logic.o(i.OnActionCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = OnActionCallback &rArr; IOT_ACTION_REPLY &rArr; _publish_action_to_cloud &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayDataSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_ACTION_REPLY
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_usr_logic.o(i._register_data_template_action)
</UL>
<P><STRONG><a name="[5d]"></a>OnControlMsgCallback</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, data_template_usr_logic.o(i.OnControlMsgCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = OnControlMsgCallback &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_usr_logic.o(i._register_data_template_property)
</UL>
<P><STRONG><a name="[5f]"></a>OnReportReplyCallback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, data_template_usr_logic.o(i.OnReportReplyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OnReportReplyCallback &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_usr_logic.o(i.data_template_demo_task)
</UL>
<P><STRONG><a name="[1a6]"></a>_init_data_template</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, data_template_usr_logic.o(i._init_data_template))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_data_template
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[180]"></a>_register_data_template_action</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, data_template_usr_logic.o(i._register_data_template_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _register_data_template_action &rArr; IOT_Template_Destroy &rArr; qcloud_iot_template_reset &rArr; _unsubscribe_template_downstream_topic &rArr; module_mqtt_unsub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Action
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[181]"></a>_register_data_template_property</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, data_template_usr_logic.o(i._register_data_template_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _register_data_template_property &rArr; IOT_Template_Destroy &rArr; qcloud_iot_template_reset &rArr; _unsubscribe_template_downstream_topic &rArr; module_mqtt_unsub &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Register_Property
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Template_Destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[19f]"></a>cycle_report_info</STRONG> (Thumb, 244 bytes, Stack size 112 bytes, data_template_usr_logic.o(i.cycle_report_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = cycle_report_info &rArr; OledShowString &rArr; OLED_ShowChar &rArr; OledSetPos &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HumAndTempRead
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLumen
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShowString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;expired
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;countdown_ms
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_propery_changed
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[1a8]"></a>deal_down_stream_user_logic</STRONG> (Thumb, 294 bytes, Stack size 288 bytes, data_template_usr_logic.o(i.deal_down_stream_user_logic))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = deal_down_stream_user_logic &rArr; OledShowString &rArr; OLED_ShowChar &rArr; OledSetPos &rArr; OledWriteOnI2c &rArr; HAL_I2C_Master_Transmit &rArr; I2C_MasterRequestWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorControl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayDataSend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShowString
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Snprintf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_setFlag
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[1aa]"></a>eventPostCheck</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, data_template_usr_logic.o(i.eventPostCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = eventPostCheck &rArr; IOT_Post_Event &rArr; _publish_event_to_cloud &rArr; module_mqtt_pub &rArr; module_mqtt_publ &rArr; at_obj_exec_cmd &rArr; HAL_MutexUnlock &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Post_Event
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_getFlag
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_clearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[61]"></a>event_post_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, data_template_usr_logic.o(i.event_post_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = event_post_cb &rArr; Log_writter &rArr; HAL_Printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOT_Event_clearFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> data_template_usr_logic.o(i.eventPostCheck)
</UL>
<P><STRONG><a name="[1a3]"></a>net_prepare</STRONG> (Thumb, 242 bytes, Stack size 208 bytes, data_template_usr_logic.o(i.net_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = net_prepare &rArr; module_init &rArr; at_client_init &rArr; hal_thread_create &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Log_writter
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SleepMs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetDevInfo
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_init
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iot_device_info_get
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_info_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_handshake
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_template_demo_task
</UL>

<P><STRONG><a name="[1a0]"></a>set_propery_changed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, data_template_usr_logic.o(i.set_propery_changed))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle_report_info
</UL>

<P><STRONG><a name="[161]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[158]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[17c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[17b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[5a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[74]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[53]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
